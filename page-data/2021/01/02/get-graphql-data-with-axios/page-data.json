{"componentChunkName":"component---src-templates-post-js","path":"/2021/01/02/get-graphql-data-with-axios/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2021-02-10T00:00:00.000Z\",\n  \"title\": \"Sample Data\",\n  \"tags\": [\"graphql\", \"api\", \"notes\"],\n  \"private\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Ok this is a little snippet I\\u2019ve got set up to query data from the\\nGitHub GraphQL API.\"), mdx(\"p\", null, \"I use this for getting data to work with in data visualisation tools,\\nI\\u2019ve done it a couple of times noe with my Gatsby site but now I\\u2019m\\nattempting to do it in a serverless function.\"), mdx(\"p\", null, \"Here\\u2019s the snippet I\\u2019m using from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/52816623/graphql-post-request-in-axios\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener\"\n  }), \"SO\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import axios from 'axios'\\nimport query from './query'\\n\\nexport async function getGitHubData() {\\n  const gitHubCall = await axios.post(\\n    `https://api.github.com/graphql`,\\n    {\\n      query,\\n    },\\n    {\\n      headers: {\\n        'Content-Type': 'application/json',\\n        Authorization: 'token ' + process.env.GITHUB_TOKEN,\\n      },\\n    }\\n  )\\n  return gitHubCall.data.data\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GITHUB_TOKEN\"), \" is needed for access to the GitHub GraphQL\\nendpoint.\"), mdx(\"p\", null, \"For the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GITHUB_TOKEN\"), \" you can create that from your GitHub account,\\nthe steps are, from your github profile page:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Settings >\\n# Developer Settings>\\n# Personal access tokens>\\n# Generate new token>\\n# select repo access\\n\")), mdx(\"p\", null, \"Or use the link here: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/settings/tokens/new\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener\"\n  }), \"https://github.com/settings/tokens/new\")), mdx(\"p\", null, \"The query can be something really simple to begin with to validate\\nit\\u2019s working:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"export default `\\n{\\n  viewer {\\n    id\\n    bio\\n  }\\n}\\n`\\n\")), mdx(\"p\", null, \"To consume the data somewhere else in your codebase:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { getGitHubData } from './github-query'\\n\\nasync function dataGet() {\\n  const data = await getGitHubData()\\n  console.log('=====================')\\n  console.log(data)\\n  console.log('=====================')\\n}\\n\")), mdx(\"p\", null, \"If the query you\\u2019re using takes variables then add that to the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variables\"), \" object in the Axios request, in this example I\\u2019ve\\nhardcoded in my GitHub username:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import axios from 'axios'\\nimport query from './query'\\n\\nexport async function getGitHubData() {\\n  const gitHubCall = await axios.post(\\n    `https://api.github.com/graphql`,\\n    {\\n      // query using ES6+ shorthand\\n      // query can be like query: query,\\n      query,\\n      variables: {\\n        username: 'spences10',\\n      },\\n    },\\n\\n    {\\n      headers: {\\n        'Content-Type': 'application/json',\\n        Authorization: 'token ' + process.env.GITHUB_TOKEN,\\n      },\\n    }\\n  )\\n  return gitHubCall.data.data\\n}\\n\")), mdx(\"p\", null, \"The GraphQL query will look something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"export default `\\nquery BIO_QUERY($username: String!) {\\n  user(login: $username) {\\n    id\\n    bio\\n  }\\n}\\n`\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"timeToRead":1,"excerpt":"Ok this is a little snippet I've got set up to query data from the\nGitHub GraphQL API. I use this for getting data to work with in dataâ€¦","frontmatter":{"title":"Sample Data","date":"2021 February 10th","private":false,"tags":["graphql","api","notes"]},"fields":{"slug":"/2021/01/02/get-graphql-data-with-axios/","editLink":"https://github.com/gergatron/gergatron.com/edit/authoring/content/posts/2021/01/02/get-graphql-data-with-axios/index.mdx"}}},"pageContext":{"slug":"/2021/01/02/get-graphql-data-with-axios/"}},"staticQueryHashes":["2382116070","2382116070"]}